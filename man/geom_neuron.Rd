% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ggplot2.R
\name{geom_neuron}
\alias{geom_neuron}
\alias{geom_neuron.neuron}
\alias{geom_neuron.neuronlist}
\alias{geom_neuron.mesh3d}
\alias{geom_neuron.hxsurf}
\alias{geom_neuron.NULL}
\alias{geom_neuron.list}
\alias{geom_neuron.matrix}
\alias{geom_neuron.data.frame}
\alias{geom_neuron.dotprops}
\alias{geom_neuron.synapticneuron}
\alias{geom_neuron.splitneuron}
\title{Create ggplot2 Geom Layer for Neuron Visualisation}
\usage{
geom_neuron(
  x = NULL,
  rotation_matrix = NULL,
  root = 3,
  size = 0.5,
  cols = c("navy", "turquoise"),
  stat = "identity",
  position = "identity",
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = FALSE,
  threshold = Inf,
  ...
)

\method{geom_neuron}{neuron}(
  x = NULL,
  rotation_matrix = NULL,
  root = 3,
  size = 0.5,
  cols = c("navy", "turquoise"),
  stat = "identity",
  position = "identity",
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = FALSE,
  threshold = Inf,
  ...
)

\method{geom_neuron}{neuronlist}(
  x = NULL,
  rotation_matrix = NULL,
  root = 3,
  size = 0.5,
  cols = c("navy", "turquoise"),
  stat = "identity",
  position = "identity",
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = FALSE,
  threshold = Inf,
  ...
)

\method{geom_neuron}{mesh3d}(
  x = NULL,
  rotation_matrix = NULL,
  root = 3,
  size = 0.5,
  cols = c("navy", "turquoise"),
  stat = "identity",
  position = "identity",
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = FALSE,
  threshold = Inf,
  ...
)

\method{geom_neuron}{hxsurf}(
  x = NULL,
  rotation_matrix = NULL,
  root = 3,
  size = 0.5,
  cols = c("navy", "turquoise"),
  stat = "identity",
  position = "identity",
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = FALSE,
  threshold = Inf,
  ...
)

\method{geom_neuron}{`NULL`}(
  x = NULL,
  rotation_matrix = NULL,
  root = 3,
  size = 0.5,
  cols = c("navy", "turquoise"),
  stat = "identity",
  position = "identity",
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = FALSE,
  threshold = Inf,
  ...
)

\method{geom_neuron}{list}(
  x = NULL,
  rotation_matrix = NULL,
  root = 3,
  size = 0.5,
  cols = c("navy", "turquoise"),
  stat = "identity",
  position = "identity",
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = FALSE,
  threshold = Inf,
  ...
)

\method{geom_neuron}{matrix}(
  x = NULL,
  rotation_matrix = NULL,
  root = 3,
  size = 0.5,
  cols = c("navy", "turquoise"),
  stat = "identity",
  position = "identity",
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = FALSE,
  threshold = Inf,
  ...
)

\method{geom_neuron}{data.frame}(
  x = NULL,
  rotation_matrix = NULL,
  root = 3,
  size = 0.5,
  cols = c("navy", "turquoise"),
  stat = "identity",
  position = "identity",
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = FALSE,
  threshold = Inf,
  ...
)

\method{geom_neuron}{dotprops}(
  x = NULL,
  rotation_matrix = NULL,
  root = 3,
  size = 0.5,
  cols = c("navy", "turquoise"),
  stat = "identity",
  position = "identity",
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = FALSE,
  threshold = Inf,
  ...
)

\method{geom_neuron}{synapticneuron}(
  x = NULL,
  rotation_matrix = NULL,
  root = 3,
  size = 0.5,
  cols = c("navy", "turquoise"),
  stat = "identity",
  position = "identity",
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = FALSE,
  threshold = Inf,
  ...
)

\method{geom_neuron}{splitneuron}(
  x = NULL,
  rotation_matrix = NULL,
  root = 3,
  size = 0.5,
  cols = c("navy", "turquoise"),
  stat = "identity",
  position = "identity",
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = FALSE,
  threshold = Inf,
  ...
)
}
\arguments{
\item{x}{A 'neuron', 'neuronlist', or 'mesh3d' object to be visualised.}

\item{rotation_matrix}{An optional 4x4 rotation matrix to apply to the neuron coordinates.}

\item{root}{Numeric, if >0 and x is or contains \code{neuron} objects,
then the root node is plotted as a dot of size \code{root}. If \code{FALSE} or \code{0} no root node is plotted.}

\item{size}{Numeric, the line width for neuron skeleton paths. Default is 0.5.}

\item{cols}{The colour to plot the neurons in. If \code{length(cols)==length(x)} each neuron will be coloured
by its index in \code{x} applied to \code{cols}.}

\item{stat}{The statistical transformation to use on the data for this layer.}

\item{position}{Position adjustment, either as a string, or the result of a call to a position adjustment function.}

\item{na.rm}{If FALSE, the default, missing values are removed with a warning. If TRUE, missing values are silently removed.}

\item{show.legend}{logical. Should this layer be included in the legends? NA, the default, includes if any aesthetics are mapped.}

\item{inherit.aes}{If FALSE, overrides the default aesthetics, rather than combining with them.}

\item{threshold}{the minimum threshold for healing neuron skeletons for visualisation, using \code{nat::stitch_neurons_mst}.}

\item{...}{Other arguments passed on to layer().}
}
\value{
A list of ggplot2 geom layers for visualising the neuron.
}
\description{
This function creates a ggplot2 geom layer for visualising neuron objects.
It supports 'neuron', 'neuronlist', and 'mesh3d' objects. For split neurons
(created using flow centrality analysis from Schneider-Mizell et al., 2016),
it colours axonal and dendritic compartments differently.
}
\examples{
\dontrun{
library(nat.ggplot)

# Plot a single neuron
gganat +
  geom_neuron(banc.skels[[1]], rotation_matrix = banc_view)

# Plot all neurons with custom colours
gganat +
  geom_neuron(banc.skels,
              rotation_matrix = banc_view,
              cols = c("purple", "magenta"))

# Plot brain mesh as context
gganat +
  geom_neuron(banc.brain_neuropil,
              rotation_matrix = banc_view,
              cols = c("grey75", "grey50"),
              alpha = 0.3)

# Plot split neurons showing axon/dendrite
gganat +
  geom_neuron(banc.neurons.flow[[1]],
              rotation_matrix = banc_view)

# Plot synapses as points
gganat +
  geom_neuron(as.matrix(banc.syns[, c("X", "Y", "Z")]),
              rotation_matrix = banc_view,
              root = 0.5,
              cols = c("navy", "red"))
}

}
